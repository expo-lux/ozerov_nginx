- name: "NGX-14 tests"
  hosts: all
  gather_facts: no

  tasks:
    # - name: Set base_domain variable
    #   set_fact:
    #     base_domain: "{{ inventory_hostname }}"
      
    - name: Set home_host variable
      set_fact:
        home_host: "{{ groups['runner'][0] }}"

    - name: Test redirect to https "http://{{ base_domain}}"
      uri:
        url: "http://{{ base_domain}}"
        status_code: [301]
        follow_redirects: no
      delegate_to: "{{ home_host }}"
      when: inventory_hostname == groups['master_loadbalancer'][0]


    - name: Test invalid url "https://{{ base_domain}}/test"
      uri:
        url: "https://{{ base_domain}}/test"
        status_code: [404]
        follow_redirects: yes
        validate_certs: no
      delegate_to: "{{ home_host }}"
      when: inventory_hostname == groups['master_loadbalancer'][0]

    - name: Test nginx-exporter url "http://{{ groups['master_loadbalancer'][0] }}:8080/metrics"
      uri:
        url: "http://{{ groups['master_loadbalancer'][0] }}:8080/metrics"
        status_code: [200]
        follow_redirects: yes
        validate_certs: no
      delegate_to: "{{ home_host }}"
      when: inventory_hostname == groups['master_loadbalancer'][0]

    - name: Test nginx-exporter url "http://{{ groups['slave_loadbalancer'][0] }}:8080/metrics"
      uri:
        url: "http://{{ groups['slave_loadbalancer'][0] }}:8080/metrics"
        status_code: [200]
        follow_redirects: yes
        validate_certs: no
      delegate_to: "{{ home_host }}"
      when: inventory_hostname == groups['master_loadbalancer'][0]



    # - name: restart nginxlog_exporter
    #   become: true
    #   systemd:
    #     # daemon_reload: true
    #     name: prometheus-nginxlog-exporter
    #     state: restarted

    # - name: get metrics page
    #   uri:
    #     url: "http://{{ base_domain}}:{{ nginx_exporter_port }}/metrics"
    #     status_code: [200]
    #     return_content: yes
    #   register: response
    #   delegate_to: "{{ home_host }}"

    # - name: check nginx_http_response_count_total{app="default",method="",status="201"} metric equals 4
    #   set_fact:
    #     count: "{{ response.content | regex_search('nginx_http_response_count_total{.*status=\"201\"} ([0-9]+)', '\\1', multiline=True, ignorecase=True) | join('') }}"
    #   failed_when: count != '4'